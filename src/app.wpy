<style lang="less">
@import "./components/colorui/main.wxss";
@import "./components/colorui/icon.wxss";

/*.container {
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: space-between;
  box-sizing: border-box;
}*/
</style>

<script>
    import wepy from 'wepy'
    import 'wepy-async-function'
    import api from '@/utils/api'
    import { setStore } from 'wepy-redux'
    import configStore from './store'

    const store = configStore()
    setStore(store)

    export default class extends wepy.app {
        config = {
            pages: [
                'pages/index',
                // 'pages/messages/create'
            ],
            // tabBar: {
            //   custom: true,
            // },
            window: {
                navigationBarBackgroundColor: '#39b54a',
                navigationBarTitleText: '领红包',
                navigationBarTextStyle: 'white',
                navigationStyle: 'custom'
            },
            usingComponents: {
              "cu-custom": "/components/colorui/components/cu-custom"
            },

        }

        globalData = {
            userInfo: null,
            StatusBar: null,
            Custom: null,
            CustomBar: null,
            appName: '扫码领红包',
        }
        data = {
            tokenKey: 'accessToken',
            userInfoKey: 'userInfo'
        }

        // 获取当前登录用户信息
        async getCurrentUser () {
            if (!this.checkLogin()) {
                return null
            }
            // 从缓存中获取用户信息
            let user = wepy.getStorageSync('user')

            try {
                // 登录了但是缓存中没有，请求接口获取
                if (!user) {
                    let userResponse = await api.authRequest('current-user')
                    if (userResponse.statusCode === 200) {
                        user = userResponse.data
                        this.isLogin = true
                        wepy.setStorageSync('user', user)
                    } else {
                      // api.login()
                    }
                }
            } catch (err) {
                console.log(err)
                wepy.showModal({
                    title: '提示',
                    content: '服务器错误，请联系管理员'
                })
            }
            return user
        }

        // 用户是否已经登录
        checkLogin () {
            return (wepy.getStorageSync('access_token') !== '')
        }

        constructor () {
            super()
            this.use('requestfix')
            this.use('promisify')
        }


         onLaunch() {
            console.log('onLaunch')
            wx.getSystemInfo({
              success: e => {
                this.globalData.StatusBar = e.statusBarHeight;
                let capsule = wx.getMenuButtonBoundingClientRect();
                if (capsule) {
                  this.globalData.Custom = capsule;
                  this.globalData.CustomBar = capsule.bottom + capsule.top - e.statusBarHeight;
                } else {
                  this.globalData.CustomBar = e.statusBarHeight + 50;
                }
                wepy.setStorageSync('globalData', this.globalData)
                console.log('onLaunchend', e)
              }

            })

            // let systemInfo = await wepy.getSystemInfo()
            // console.log(systemInfo)
            // this.globalData.StatusBar = systemInfo.statusBarHeight
            // wepy.$instance.globalData.StatusBar = systemInfo.statusBarHeight
            // let capsule = wx.getMenuButtonBoundingClientRect();
            // console.log(capsule)
            // if (capsule) {
            //     this.globalData.Custom = capsule
            //     this.globalData.CustomBar = capsule.bottom + capsule.top - systemInfo.statusBarHeight
            // } else {
            //     this.globalData.CustomBar = systemInfo.statusBarHeight + 50;
            // }
            // console.log(this.globalData)
        }

        sleep (s) {
            return new Promise((resolve, reject) => {
              setTimeout(() => {
                resolve('promise resolved')
            }, s * 1000)
          })
        }

        async testAsync () {
            const data = await this.sleep(3)
            console.log(data)
        }

        getUserInfo(cb) {
            const that = this
            if (this.globalData.userInfo) {
                return this.globalData.userInfo
            }
            wepy.getUserInfo({
                success (res) {
                    that.globalData.userInfo = res.userInfo
                    cb && cb(res.userInfo)
                }
            })
        }
    }
</script>
